/**
 * Export current Apps, Technologies, and Roles from database
 * to update seed-enterprise-data.ts file
 *
 * Usage: npx ts-node src/scripts/export-seed-data.ts
 */

import fs from 'fs';
import path from 'path';
import sequelize from '../config/database';
import App from '../models/App';
import Technology from '../models/Technology';
import Role from '../models/Role';

const exportSeedData = async () => {
  try {
    console.log('📤 Exporting current database state to seed file...\n');

    // Fetch all current apps, technologies, and roles
    const apps = await App.findAll({
      attributes: ['name', 'code', 'category', 'description', 'isGlobal', 'status'],
      order: [['id', 'ASC']],
      raw: true,
    });

    const technologies = await Technology.findAll({
      attributes: ['name', 'code', 'category', 'description'],
      order: [['id', 'ASC']],
      raw: true,
    });

    const roles = await Role.findAll({
      attributes: ['name', 'code', 'level', 'category'],
      order: [['id', 'ASC']],
      raw: true,
    });

    console.log(`✅ Fetched ${apps.length} apps`);
    console.log(`✅ Fetched ${technologies.length} technologies`);
    console.log(`✅ Fetched ${roles.length} roles\n`);

    // Generate TypeScript code for the seed data file
    const fileContent = `/**
 * Comprehensive Enterprise Seed Data
 * Includes Apps, Technologies, and Roles for:
 * - Engineering (PLM, CAD, Simulation)
 * - SAP (PP, MM, MDG, CRM, VC)
 * - Custom Development (.NET, Node.js, React)
 * - Low-Code (Mendix)
 * - Infrastructure (VDI, DBA, Basis)
 *
 * IMPORTANT: This file is auto-generated by export-seed-data.ts
 * Last updated: ${new Date().toISOString()}
 */

import App from '../models/App';
import Technology from '../models/Technology';
import Role from '../models/Role';

/**
 * APPS DATA - ${apps.length} Enterprise Applications
 */
export const enterpriseApps = ${JSON.stringify(apps, null, 2).replace(/"([^"]+)":/g, '$1:')};

/**
 * TECHNOLOGIES DATA - ${technologies.length} Technologies mapped to Apps
 */
export const enterpriseTechnologies = ${JSON.stringify(technologies, null, 2).replace(/"([^"]+)":/g, '$1:')};

/**
 * ROLES DATA - ${roles.length} Professional Roles
 */
export const enterpriseRoles = ${JSON.stringify(roles, null, 2).replace(/"([^"]+)":/g, '$1:')};

/**
 * CAPABILITY MAPPINGS - Realistic combinations of App/Tech/Role
 * These show which technologies and roles typically work together
 *
 * NOTE: This is reference data and needs to be manually maintained
 * based on your organization's actual skill combinations.
 */
export const capabilityMappings = [
  // Engineering PLM Capabilities
  { app: 'Teamcenter', tech: 'Teamcenter ITK', role: 'PLM Administrator', proficiency: 'Expert', yearsExp: 5 },
  { app: 'Teamcenter', tech: 'Teamcenter SOA', role: 'Integration Developer', proficiency: 'Advanced', yearsExp: 4 },
  { app: 'Teamcenter', tech: 'Active Workspace', role: 'Teamcenter Administrator', proficiency: 'Expert', yearsExp: 5 },
  { app: 'NX', tech: 'NX Open', role: 'CAD Engineer', proficiency: 'Advanced', yearsExp: 3 },
  { app: 'NX', tech: 'NX CAD', role: 'Mechanical Design Engineer', proficiency: 'Expert', yearsExp: 5 },
  { app: 'SolidWorks', tech: 'SolidWorks API', role: 'CAD Engineer', proficiency: 'Advanced', yearsExp: 4 },
  { app: 'SolidWorks', tech: 'SolidWorks PDM', role: 'CAD Administrator', proficiency: 'Expert', yearsExp: 5 },
  { app: 'Creo', tech: 'Creo Toolkit', role: 'CAD Engineer', proficiency: 'Advanced', yearsExp: 4 },
  { app: 'ANSYS', tech: 'ANSYS Mechanical', role: 'Simulation Engineer', proficiency: 'Expert', yearsExp: 5 },
  { app: 'E3.series', tech: 'E3.series Platform', role: 'Electrical Design Engineer', proficiency: 'Advanced', yearsExp: 4 },

  // SAP Functional Capabilities
  { app: 'SAP PP', tech: 'SAP PP Module', role: 'SAP PP Consultant', proficiency: 'Expert', yearsExp: 6 },
  { app: 'SAP MM', tech: 'SAP MM Module', role: 'SAP MM Consultant', proficiency: 'Expert', yearsExp: 6 },
  { app: 'SAP MDG', tech: 'SAP MDG Platform', role: 'SAP MDG Consultant', proficiency: 'Advanced', yearsExp: 4 },
  { app: 'SAP CRM', tech: 'SAP CRM Module', role: 'SAP CRM Consultant', proficiency: 'Expert', yearsExp: 5 },
  { app: 'SAP VC', tech: 'SAP VC Engine', role: 'SAP VC Consultant', proficiency: 'Expert', yearsExp: 5 },
  { app: 'SAP S/4HANA', tech: 'SAP S/4HANA Platform', role: 'SAP S/4HANA Consultant', proficiency: 'Advanced', yearsExp: 3 },

  // SAP Technical Capabilities
  { app: 'SAP ERP', tech: 'ABAP', role: 'SAP ABAP Developer', proficiency: 'Expert', yearsExp: 6 },
  { app: 'SAP ERP', tech: 'ABAP OO', role: 'SAP ABAP Developer', proficiency: 'Advanced', yearsExp: 4 },
  { app: 'SAP ERP', tech: 'SAP Basis', role: 'SAP Basis Administrator', proficiency: 'Expert', yearsExp: 7 },
  { app: 'SAP S/4HANA', tech: 'SAP HANA', role: 'SAP HANA Administrator', proficiency: 'Expert', yearsExp: 5 },
  { app: 'SAP Fiori', tech: 'SAP Fiori Elements', role: 'SAP Fiori Developer', proficiency: 'Advanced', yearsExp: 3 },
  { app: 'SAP ERP', tech: 'SAP Gateway', role: 'SAP Integration Consultant', proficiency: 'Advanced', yearsExp: 4 },

  // Custom Development Capabilities
  { app: 'iAlign', tech: 'React', role: 'React Developer', proficiency: 'Expert', yearsExp: 4 },
  { app: 'iAlign', tech: 'TypeScript', role: 'Full-Stack Developer', proficiency: 'Expert', yearsExp: 5 },
  { app: 'Engineering Portal', tech: '.NET Framework', role: '.NET Developer', proficiency: 'Expert', yearsExp: 6 },
  { app: 'Engineering Portal', tech: 'ASP.NET', role: '.NET Developer', proficiency: 'Advanced', yearsExp: 5 },
  { app: 'Engineering Portal', tech: 'C#', role: 'Backend Developer', proficiency: 'Expert', yearsExp: 6 },
  { app: 'Resource Hub', tech: 'Node.js', role: 'Node.js Developer', proficiency: 'Expert', yearsExp: 5 },
  { app: 'Resource Hub', tech: 'Express.js', role: 'Backend Developer', proficiency: 'Advanced', yearsExp: 4 },
  { app: 'Project Dashboard', tech: 'Angular', role: 'Frontend Developer', proficiency: 'Advanced', yearsExp: 3 },
  { app: 'Project Dashboard', tech: 'Vue.js', role: 'Frontend Developer', proficiency: 'Expert', yearsExp: 4 },

  // Low-Code Capabilities
  { app: 'Mendix', tech: 'Mendix Studio Pro', role: 'Mendix Developer', proficiency: 'Expert', yearsExp: 3 },
  { app: 'Mendix', tech: 'Mendix Runtime', role: 'Low-Code Developer', proficiency: 'Advanced', yearsExp: 2 },
  { app: 'Power Apps', tech: 'Power Fx', role: 'Power Apps Developer', proficiency: 'Intermediate', yearsExp: 2 },
  { app: 'Power BI', tech: 'DAX', role: 'Data Analyst', proficiency: 'Advanced', yearsExp: 3 },

  // Infrastructure & Support Capabilities
  { app: 'Citrix Virtual Apps', tech: 'Citrix XenApp', role: 'VDI Administrator', proficiency: 'Expert', yearsExp: 5 },
  { app: 'VMware Horizon', tech: 'VMware vSphere', role: 'VMware Administrator', proficiency: 'Expert', yearsExp: 6 },
  { app: 'Microsoft Azure', tech: 'Azure Cloud', role: 'Cloud Engineer', proficiency: 'Advanced', yearsExp: 4 },
  { app: 'AWS', tech: 'AWS Cloud', role: 'Cloud Architect', proficiency: 'Expert', yearsExp: 6 },
  { app: 'Docker', tech: 'Docker Engine', role: 'DevOps Engineer', proficiency: 'Advanced', yearsExp: 3 },
  { app: 'Kubernetes', tech: 'Kubernetes Cluster', role: 'Platform Engineer', proficiency: 'Expert', yearsExp: 4 },

  // Database Capabilities (using existing apps)
  { app: 'SAP S/4HANA', tech: 'SAP HANA', role: 'SAP HANA Administrator', proficiency: 'Expert', yearsExp: 5 },
  { app: 'SAP ERP', tech: 'SAP Basis', role: 'Database Administrator (DBA)', proficiency: 'Expert', yearsExp: 7 },

  // Testing & QA Capabilities
  { app: 'Selenium', tech: 'Selenium WebDriver', role: 'Automation Test Engineer', proficiency: 'Advanced', yearsExp: 4 },
  { app: 'Postman', tech: 'Postman Collections', role: 'QA Tester', proficiency: 'Intermediate', yearsExp: 2 },
  { app: 'SoapUI', tech: 'SoapUI Pro', role: 'Test Analyst', proficiency: 'Advanced', yearsExp: 3 },

  // DevOps Capabilities
  { app: 'Azure DevOps', tech: 'Azure Pipelines', role: 'CI/CD Engineer', proficiency: 'Advanced', yearsExp: 3 },
  { app: 'Jenkins', tech: 'Jenkins Pipeline', role: 'DevOps Engineer', proficiency: 'Expert', yearsExp: 5 },
  { app: 'Git', tech: 'Git SCM', role: 'Full-Stack Developer', proficiency: 'Advanced', yearsExp: 4 },
  { app: 'Terraform', tech: 'Terraform HCL', role: 'Cloud Engineer', proficiency: 'Advanced', yearsExp: 3 },
];

/**
 * Seed function to populate database with enterprise data
 */
export const seedEnterpriseData = async () => {
  try {
    console.log('🌱 Seeding enterprise Apps, Technologies, and Roles...\\n');

    // 1. Seed Apps
    console.log('📱 Creating Apps...');
    const apps: any[] = [];
    for (const appData of enterpriseApps) {
      const app = await App.create({ ...appData, isActive: true });
      apps.push(app);
    }
    console.log(\`   ✅ Created \${apps.length} apps\\n\`);

    // 2. Seed Technologies (map to correct appId)
    console.log('⚙️  Creating Technologies...');
    const technologies: any[] = [];

    // Create a mapping of app codes to IDs
    const appCodeMap: { [key: string]: number } = {};
    apps.forEach(app => {
      appCodeMap[app.code] = app.id;
    });

    for (let i = 0; i < enterpriseTechnologies.length; i++) {
      const techData = enterpriseTechnologies[i];

      // Find the app for this technology
      let appId = 1; // default
      const techCode = techData.code;

      // Map technology to app based on code patterns
      if (techCode.startsWith('TC-')) appId = appCodeMap['TC'];
      else if (techCode.startsWith('NX-')) appId = appCodeMap['NX'];
      else if (techCode.startsWith('SW-')) appId = appCodeMap['SW'];
      else if (techCode.startsWith('CREO-') || techCode === 'WNDCHL') appId = appCodeMap['CREO'];
      else if (techCode.startsWith('INV-') || techCode === 'VAULT') appId = appCodeMap['INV'];
      else if (techCode.startsWith('ACAD-') || techCode === 'LISP') appId = appCodeMap['ACAD'];
      else if (techCode.startsWith('E3-')) appId = appCodeMap['E3S'];
      else if (techCode.startsWith('ANSYS-')) appId = appCodeMap['ANSYS'];
      else if (techCode.startsWith('SIMC-')) appId = appCodeMap['SIMC'];
      else if (techCode.startsWith('CATIA-')) appId = appCodeMap['CATIA'];
      else if (techCode === 'ECC' || techCode === 'ABAP' || techCode === 'ABAP-OO' || techCode === 'BASIS' ||
               techCode === 'HANA' || techCode === 'GATEWAY' || techCode === 'NETWVR' || techCode === 'CDS' || techCode === 'BTP')
        appId = appCodeMap['SAP'];
      else if (techCode === 'PP-MOD') appId = appCodeMap['PP'];
      else if (techCode === 'MM-MOD') appId = appCodeMap['MM'];
      else if (techCode === 'MDG-PLT') appId = appCodeMap['MDG'];
      else if (techCode === 'CRM-MOD') appId = appCodeMap['CRM'];
      else if (techCode === 'VC-ENG') appId = appCodeMap['VC'];
      else if (techCode === 'S4H-PLT') appId = appCodeMap['S4H'];
      else if (techCode === 'FIORI-ELEM') appId = appCodeMap['FIORI'];
      else if (techCode === 'BW4-PLT') appId = appCodeMap['BW4'];
      else if (techCode === 'SOLMAN-PLT') appId = appCodeMap['SOLMAN'];
      else if (techCode.startsWith('MNDX-')) appId = appCodeMap['MNDX'];
      else if (techCode.startsWith('OSYS-')) appId = appCodeMap['OSYS'];
      else if (techCode === 'PWRFX') appId = appCodeMap['PWRAPP'];
      else if (techCode === 'DAX') appId = appCodeMap['PWRBI'];
      else if (techCode === 'REACT' || techCode === 'TS' || techCode === 'JS') appId = appCodeMap['IALN'];
      else if (techCode === 'NODE' || techCode === 'EXPRESS') appId = appCodeMap['RESH'];
      else if (techCode.startsWith('DOTNET-') || techCode === 'ASPNET' || techCode === 'EF' || techCode === 'CSHARP')
        appId = appCodeMap['ENGP'];
      else if (techCode === 'NG' || techCode === 'VUE') appId = appCodeMap['PDASH'];
      else if (techCode === 'GIT-SCM') appId = appCodeMap['GIT'];
      else if (techCode.startsWith('JIRA-')) appId = appCodeMap['JIRA'];
      else if (techCode.startsWith('CONF-')) appId = appCodeMap['CONF'];
      else if (techCode.startsWith('AZ-')) appId = appCodeMap['AZDO'];
      else if (techCode.startsWith('JNKS-')) appId = appCodeMap['JNKS'];
      else if (techCode.startsWith('PSTMN-')) appId = appCodeMap['PSTMN'];
      else if (techCode.startsWith('SELN-')) appId = appCodeMap['SELN'];
      else if (techCode.startsWith('SOAP-')) appId = appCodeMap['SOAP'];
      else if (techCode.startsWith('CITX-')) appId = appCodeMap['CITX'];
      else if (techCode.startsWith('VMVDI-')) appId = appCodeMap['VMVDI'];
      else if (techCode.startsWith('SNOW-')) appId = appCodeMap['SNOW'];
      else if (techCode.startsWith('REMEDY-')) appId = appCodeMap['REMEDY'];
      else if (techCode.startsWith('AZURE-')) appId = appCodeMap['AZURE'];
      else if (techCode.startsWith('AWS-')) appId = appCodeMap['AWS'];
      else if (techCode.startsWith('DCKR-')) appId = appCodeMap['DCKR'];
      else if (techCode.startsWith('K8S-')) appId = appCodeMap['K8S'];
      else if (techCode.startsWith('TF-')) appId = appCodeMap['TF'];
      else if (techCode.startsWith('ANSBL-')) appId = appCodeMap['ANSBL'];

      const tech = await Technology.create({
        ...techData,
        appId,
        isActive: true
      });
      technologies.push(tech);
    }
    console.log(\`   ✅ Created \${technologies.length} technologies\\n\`);

    // 3. Seed Roles (generic roles not tied to specific tech)
    console.log('👥 Creating Roles...');
    const roles: any[] = [];
    for (const roleData of enterpriseRoles) {
      const role = await Role.create({
        ...roleData,
        isActive: true
      } as any);
      roles.push(role);
    }
    console.log(\`   ✅ Created \${roles.length} roles\\n\`);

    console.log('🎉 Enterprise data seeding completed!\\n');
    console.log('📊 Summary:');
    console.log(\`   - Apps: \${apps.length}\`);
    console.log(\`   - Technologies: \${technologies.length}\`);
    console.log(\`   - Roles: \${roles.length}\`);
    console.log(\`   - Capability Mappings: \${capabilityMappings.length} (reference data)\\n\`);

    return { apps, technologies, roles };
  } catch (error) {
    console.error('❌ Enterprise data seeding failed:', error);
    throw error;
  }
};

// Export for use in main seed script
export default seedEnterpriseData;
`;

    // Write to file
    const targetPath = path.join(__dirname, 'seed-enterprise-data.ts');
    const backupPath = path.join(__dirname, `seed-enterprise-data.backup.${Date.now()}.ts`);

    // Create backup of existing file
    if (fs.existsSync(targetPath)) {
      fs.copyFileSync(targetPath, backupPath);
      console.log(`💾 Backed up existing file to: ${path.basename(backupPath)}\n`);
    }

    // Write new file
    fs.writeFileSync(targetPath, fileContent, 'utf-8');
    console.log(`✅ Updated seed-enterprise-data.ts successfully!\n`);

    console.log('📋 Summary:');
    console.log(`   - Apps exported: ${apps.length}`);
    console.log(`   - Technologies exported: ${technologies.length}`);
    console.log(`   - Roles exported: ${roles.length}`);
    console.log(`   - File: ${targetPath}`);
    console.log(`   - Backup: ${backupPath}\n`);

    console.log('✨ Next time you run the seed script, it will use this updated data!\n');

    return true;
  } catch (error) {
    console.error('❌ Export failed:', error);
    throw error;
  } finally {
    await sequelize.close();
  }
};

// Only run if executed directly (not imported)
if (require.main === module) {
  exportSeedData()
    .then(() => process.exit(0))
    .catch(() => process.exit(1));
}

export default exportSeedData;
